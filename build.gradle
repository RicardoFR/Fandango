plugins {
  id "java"
  id "idea"
  id "application"
  id "net.ltgt.apt-eclipse" version "$ltgtVersion"
  id "net.ltgt.apt-idea" version "$ltgtVersion"
  id "com.github.johnrengelman.shadow" version "$shadowVersion"
  id "io.spring.dependency-management" version "$springManagementVersion"
  id "com.google.cloud.tools.jib" version "$jibVersion"
}

group "es.fandango"
description = 'fandango'
version "$fandangoVersion"

mainClassName = "es.fandango.MicronautApp"

jib {
  from {
    image = 'gcr.io/distroless/java-debian10:11'
  }
  to {
    image = "vettonum/$description"
    tags = [version]
    container {
      mainClass = 'es.fandango.MicronautApp'
      args = []
      ports = ['8585/tcp']
    }
  }
}

repositories {
  mavenCentral()
  maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
  imports {
    mavenBom "io.micronaut:micronaut-bom:$micronautBomVersion"
  }
}

dependencies {

  compileOnly "com.oracle.substratevm:svm:$substratevmVersion"

  runtimeOnly "ch.qos.logback:logback-classic:$logbackClassicVersion"

  // Micronaut
  implementation "io.micronaut:micronaut-inject:$micronautVersion"
  implementation "io.micronaut:micronaut-runtime:$micronautVersion"
  implementation "io.micronaut:micronaut-validation:$micronautVersion"
  implementation "io.micronaut:micronaut-management:$micronautVersion"
  implementation "io.micronaut:micronaut-http-client:$micronautVersion"
  implementation "io.micronaut:micronaut-inject-java:$micronautVersion"
  implementation "io.micronaut:micronaut-http-server-netty:$micronautVersion"
  implementation "io.micronaut.security:micronaut-security:$micronautSecurityVersion"

  // Micronaut Config
  implementation "io.micronaut.configuration:micronaut-mongo-reactive:$micronautMongoVersion"
  implementation "io.micronaut.micrometer:micronaut-micrometer-core:$micronautMicrometerVersion"
  implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus:$micronautMicrometerVersion"
  implementation "io.micronaut.discovery:micronaut-discovery-client:$micronautDiscoveryVersion"

  // Common
  implementation "org.projectlombok:lombok:$lombokVersion"
  implementation "commons-io:commons-io:$commonsioVersion"
  implementation "javax.annotation:javax.annotation-api:$javaxVersion"
  implementation "ch.qos.logback:logback-classic:$logbackClassicVersion"
  implementation "io.swagger.core.v3:swagger-annotations:$swaggerVersion"

  // Annotations processors
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "io.micronaut:micronaut-graal:$micronautVersion"
  annotationProcessor "io.micronaut:micronaut-validation:$micronautVersion"
  annotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
  annotationProcessor "io.micronaut.openapi:micronaut-openapi:$micronautOpenApiVersion"
  annotationProcessor "io.micronaut.security:micronaut-security-annotations:$micronautSecurityVersion"

  // Test dependencies
  testCompile "org.projectlombok:lombok:$lombokVersion"
  testCompile "io.micronaut:micronaut-inject:$micronautVersion"
  testCompile "io.micronaut:micronaut-inject-java:$micronautVersion"
  testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
  testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testCompile "io.micronaut.test:micronaut-test-core:$micronautTestVersion"
  testCompile "io.micronaut.test:micronaut-test-junit5:$micronautTestVersion"
  testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$embedmongoVersion"

  // Tests annotations processors
  testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
  testAnnotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
  testAnnotationProcessor "io.micronaut:micronaut-validation:$micronautVersion"
}

/**
 * Add task to generate swagger
 */
tasks.withType(JavaCompile) {
  options.fork = true
  options.encoding = "UTF-8"
  options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

// use JUnit 5 platform
test {
  useJUnitPlatform()
}

// Build artifact with shadowJar
shadowJar {
  mergeServiceFiles()
  archiveFileName = "fandango.jar"
}